{"version":3,"sources":["filters.js"],"names":["Filters","clamp","val","min","max","coordStrings","vertsString","coordsSoFar","split","coords","i","x","parseInt","y","isNaN","centers","push","fillFilter","image","color","width","height","brushFilter","radius","Gui","alertOnce","softBrushFilter","alpha_at_center","stringToCoords","customFilter","value"],"mappings":"AAAA,aAEA,IAAIA,QAAUA,SAAW,GAOzB,SAASC,MAAMC,EAAKC,EAAKC,GAUvB,OAASF,EAAMC,EAAOA,EAAcC,EAANF,EAAaE,EAAMF,EAMjD,SAAIG,eAAeC,GAGjB,IAFF,IAAIC,EAAAA,GADAF,EAAeC,EAAYE,MAAM,KAG/BC,EAAM,EAAGJ,EAAAA,EAAgBG,OAA7BE,IAAA,CACA,IAAIC,EAAIC,EAAQF,GAAhBF,MAAA,KACIK,EAAID,SAASH,EAAO,IAApBI,EAAID,SAASH,EAAO,IACnBK,MAAMH,IAAOG,MAAMD,IACtBE,EAAQC,KAAK,CAAAL,EAAAA,EAAAE,EAAAA,IACd,OAAAE,EAWLf,QAAQiB,WAAa,SAAUC,EAAOC,GACpC,IAAK,IAAIR,EAAI,EAAGA,EAAIO,EAAME,MAAOT,IADnCX,IAAQiB,IAAAA,EAAAA,EAARJ,EAAqBK,EAAAG,OAAiBF,KAMnC,OAAAD,GAKHlB,QAAQsB,YAAc,SAAUJ,EAAOK,EAAQJ,EAAOb,GAA9CgB,eAAchB,GAWpB,OAFAkB,IAAIC,UAAW,sCAERP,GAOTlB,QAAQ0B,gBAAkB,SAAUR,EAAOK,EAAQJ,EAAOQ,EAAiBrB,GACzEsB,eAAAtB,GADF,OAUEkB,IAAIC,UAAW,0CAVjBP,GAgBElB,QAAA6B,aAAA,SAAAX,EAAAY,GADF,OAMEN,IAAAC,UAAA,uCANFP","file":"filters.min.js","sourcesContent":["\"use strict\";\n\nvar Filters = Filters || {};\n\n////////////////////////////////////////////////////////////////////////////////\n// General utility functions\n////////////////////////////////////////////////////////////////////////////////\n\n// Constrain val to the range [min, max]\nfunction clamp(val, min, max) {\n  /* Shorthand for:\n   * if (val < min) {\n   *   return min;\n   * } else if (val > max) {\n   *   return max;\n   * } else {\n   *   return val;\n   * }\n   */\n  return ((val < min) ? min : ((val > max) ? max : val));\n}\n\n// extract vertex coordinates from a URL string\nfunction stringToCoords( vertsString ) {\n  var centers = [];\n  var coordStrings = vertsString.split(\"x\");\n  var coordsSoFar = 0;\n  for (var i = 0; i < coordStrings.length; i++) {\n    var coords = coordStrings[i].split(\"y\");\n    var x = parseInt(coords[0]);\n    var y = parseInt(coords[1]);\n    if (!isNaN(x) && !isNaN(y)) {\n      centers.push({x: x, y: y})\n    }\n  }\n\n  return centers;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Filters\n////////////////////////////////////////////////////////////////////////////////\n\n// Fill the entire image with color\nFilters.fillFilter = function( image, color ) {\n  for (var x = 0; x < image.width; x++) {\n    for (var y = 0; y < image.height; y++) {\n      // uncomment this line to enable this function\n      // image.setPixel(x, y, color);\n    }\n  }\n  return image;\n};\n\n// At each center, draw a solid circle with the specified radius and color\nFilters.brushFilter = function( image, radius, color, vertsString ) {\n  // centers is an array of (x, y) coordinates that each defines a circle center\n  var centers = stringToCoords(vertsString);\n\n  // draw a filled circle centered at every location in centers[].\n  // radius and color are specified in function arguments.\n  // ----------- STUDENT CODE BEGIN ------------\n  // ----------- Our reference solution uses 10 lines of code.\n  // ----------- STUDENT CODE END ------------\n  Gui.alertOnce ('brushFilter is not implemented yet');\n\n  return image;\n};\n\n/*\n * At each center, draw a soft circle with the specified radius and color.\n * Pixel opacity should linearly decrease with the radius from alpha_at_center to 0.\n */\nFilters.softBrushFilter = function( image, radius, color, alpha_at_center, vertsString ) {\n  // centers is an array of (x, y) coordinates that each defines a circle center\n  var centers = stringToCoords(vertsString);\n\n  // draw a filled circle with opacity equals to alpha_at_center at the center of each circle\n  // the opacity decreases linearly along the radius and becomes zero at the edge of the circle\n  // radius and color are specified in function arguments.\n  // ----------- STUDENT CODE BEGIN ------------\n  // ----------- Our reference solution uses 21 lines of code.\n  // ----------- STUDENT CODE END ------------\n  Gui.alertOnce ('softBrushFilter is not implemented yet');\n\n  return image;\n};\n\nFilters.customFilter = function( image, value ) {\n  // You can use this filter to do whatever you want\n  // ----------- STUDENT CODE BEGIN ------------\n  // ----------- Our reference solution uses 0 lines of code.\n  // ----------- STUDENT CODE END ------------\n  Gui.alertOnce ('customFilter is not implemented yet');\n  return image;\n};\n"]}